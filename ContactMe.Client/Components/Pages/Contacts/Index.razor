@page "/contacts"

@using ContactMe.Client.Components.UI.Contacts
@using ContactMe.Client.Helpers
@using ContactMe.Client.Services.Interfaces

@attribute [Authorize]
@rendermode InteractiveServer

@inject IContactDTOService ContactService
@inject ICategoryDTOService CategoryService
@inject NavigationManager Nav

<PageTitle>ContactMe | Contacts</PageTitle>

<div class="d-flex align-items-center mt-3">
    @if (!string.IsNullOrWhiteSpace(SearchTerm))
    {
        <h1>Search results for "@SearchTerm"</h1>
    }
    else if (CategoryId is not null or 0)
    {
        <h1>Category: @(categories.FirstOrDefault(c => c.Id == CategoryId)?.Name ?? "Unknown")</h1>
    }
    else
    {
        <h1>All Contacts</h1>
    }
    <a href="contacts/create" class="ms-auto btn btn-primary rounded-pill">New Contact</a>
</div>

<div class="row g-3">
    <div class="col-12 col-lg-4">
        <div class="sideNav mb-3">
            <form @onsubmit="HandleSearch">
                <div class="input-group">
                    <InputText @bind-Value="searchInput" class="form-control" placeholder="Search" />
                    <button class="btn btn-primary"><i class="bi bi-search"></i></button>
                </div>
            </form>
            <div class="mt-5">
                <label class="form-label">Category Filter</label>
                <InputSelect class="form-select" @bind-Value="CategoryId" @bind-Value:after="HandleCategoryChanged">
                    <option value="">All Contacts</option>
                    @foreach (CategoryDTO category in categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(toastMessage))
        {
            <ToastMessage @key="messageId" Message="@toastMessage" Color="@messageColor" />
        }
    </div>
    <div class="col-12 col-lg-8">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-1 g-3">
            @if (contacts.Any())
            {
                @foreach (ContactDTO contact in contacts)
                {
                    <div class="col" @key="contact.Id">
                        <ContactCard Contact="contact" OnDelete="DeleteContactAsync" />
                    </div>
                }
            }
            else
            {
                <div class="text-center sideNav">
                    <h4>No contacts found!</h4>
                    <p>
                        Why don't you <a href="contacts/create">create some</a>?
                    </p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    #region parameters
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [SupplyParameterFromQuery]
    public int? CategoryId { get; set; }

    [SupplyParameterFromQuery]
    public string? SearchTerm { get; set; }

    [SupplyParameterFromQuery]
    public string? Message { get; set; }
    #endregion

    #region state
    private UserInfo? userInfo;
    private IEnumerable<ContactDTO> contacts = [];
    private IEnumerable<CategoryDTO> categories = [];

    private string? searchInput;

    string errorMessage = string.Empty;

    private string? toastMessage;
    private string? messageColor;
    private Guid messageId = Guid.NewGuid();
    #endregion

    #region methods
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // get the userId from the auth state
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            categories = await CategoryService.GetCategoriesAsync(userInfo!.UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if(!string.IsNullOrEmpty(Message))
            {
                ShowToastMessage(Message);
            }

            if (!string.IsNullOrWhiteSpace(SearchTerm))
            {
                searchInput = SearchTerm;
                CategoryId = null;

                contacts = await ContactService.SearchContactsAsync(SearchTerm, userInfo!.UserId);
            }
            else if (CategoryId is not null or 0)
            {
                searchInput = null;

                contacts = await ContactService.GetContactsByCategoryIdAsync(CategoryId.Value, userInfo!.UserId);
            }
            else
            {
                CategoryId = null;
                searchInput = null;

                // get the list of contacts from the DB
                contacts = await ContactService.GetContactsAsync(userInfo!.UserId);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = "Could not load your contacts. Please try again later.";
        }
    }

    private async Task DeleteContactAsync(int contactId)
    {
        try
        {
            await ContactService.DeleteContactAsync(contactId, userInfo!.UserId);
            contacts = await ContactService.GetContactsAsync(userInfo!.UserId);

            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = "Failed to delete the selected contact.";
        }
    }

    private void HandleCategoryChanged()
    {
        Dictionary<string, object?> queryParameters = new Dictionary<string, object?>()
        {
            { nameof(CategoryId), CategoryId },
            { nameof(SearchTerm), null }
        };

        ShowToastMessage("category was changed");

        string url = Nav.GetUriWithQueryParameter(nameof(CategoryId), CategoryId);
        Nav.NavigateTo(url);
    }

    private void HandleSearch()
    {
        Dictionary<string, object?> queryParameters = new Dictionary<string, object?>()
        {
            { nameof(CategoryId), null },
            { nameof(SearchTerm), searchInput }
        };

        string url = Nav.GetUriWithQueryParameters(queryParameters);
        Nav.NavigateTo(url);
    }

    private void ShowToastMessage(string message)
    {
        toastMessage = message;

        if(message.ToLower().Contains("wrong") || message.ToLower().Contains("error"))
        {
            messageColor = "danger";
        }
        else
        {
            messageColor = "success";
        }

        // this will reset the toast component
        messageId = Guid.NewGuid();
    }
    #endregion
}
