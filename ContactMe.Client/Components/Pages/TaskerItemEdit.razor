@page "/tasker/edit/{id:guid}"
@using ContactMe.Client.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using ContactMe.Client.Helpers
@attribute [Authorize]

@rendermode InteractiveAuto
@inject NavigationManager NavigationManager
@inject ITaskerItemService _ITaskerService

@if (taskerItemDTO is not null)
{
    <div class="h-100 d-flex flex-column justify-content-center">
        <div class="card">
            <div class="card-body">
                <h3 class="card-title">Edit Tasker Item</h3>
                <EditForm Model="taskerItemDTO" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />

                    <div class="hstack gap-2">
                        <InputCheckbox class="form-check-input" @bind-Value="taskerItemDTO.IsComplete" />

                        <InputText class="form-control" @bind-Value="taskerItemDTO.Name" placeholder="Enter a task to complete..." />

                        <button type="submit" class="btn btn-primary btn-sm">
                            <i class="bi bi-check"></i>
                        </button>
                    </div>

                    <ValidationSummary />

                    <span class="text-danger">@errorMessage</span>
                </EditForm>
            </div>
        </div>
    </div>

}
else
{
    <div class="text-center">
        <h3>Uh Oh!</h3>
        <p>That tasker item could not be found.</p>
    </div>
}

@code {
    [Parameter] // from the page route
    public Guid Id { get; set; }

    private TaskerItemDTO? taskerItemDTO;
    private UserInfo? userInfo;
    string errorMessage = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // get the taskerItem we want to edit
        try
        {
             userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
             taskerItemDTO = await _ITaskerService.GetTaskerItemByIdAsync(Id, userInfo!.UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            taskerItemDTO = null;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            errorMessage = string.Empty;
            await _ITaskerService.UpdateTaskerItemAsync(Id, taskerItemDTO!, userInfo!.UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = "An error occurred while trying to update this item.";
        }

        if (errorMessage == string.Empty)
        {
            NavigationManager.NavigateTo("/tasker");
        }
    }
}
